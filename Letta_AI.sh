#!/bin/bash

#------------------------------------------------------------------
# K·ªãch b·∫£n c√†i ƒë·∫∑t Letta Server t·ª± ƒë·ªông
# H·ªó tr·ª£ c·∫£ ch·∫ø ƒë·ªô t∆∞∆°ng t√°c v√† ch·∫ø ƒë·ªô tham s·ªë d√≤ng l·ªánh.
#------------------------------------------------------------------

# M√†u s·∫Øc ƒë·ªÉ th√¥ng b√°o
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- H√†m hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ---
usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -d, --domain <domain/ip>      T√™n mi·ªÅn ho·∫∑c ƒë·ªãa ch·ªâ IP c·ªßa VPS."
    echo "  -o, --openai-key <key>        OpenAI API Key c·ªßa b·∫°n."
    echo "  -l, --letta-key <key>         Letta API Key b·∫£o m·∫≠t c·ªßa b·∫°n."
    echo "  -p, --pg-password <password>  M·∫≠t kh·∫©u c·ªßa user PostgreSQL."
    echo "  -u, --pg-user <user>          T√™n user c·ªßa PostgreSQL (v√≠ d·ª•: ticmiro2)."
    echo "  -n, --pg-db <dbname>          T√™n database c·ªßa PostgreSQL (v√≠ d·ª•: ticmirodb2)."
    echo "  -c, --pg-container <name>     T√™n container Docker c·ªßa PostgreSQL (m·∫∑c ƒë·ªãnh: postgres_db)."
    echo "  -h, --help                    Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y."
    echo ""
    echo "N·∫øu kh√¥ng c√≥ t√πy ch·ªçn n√†o ƒë∆∞·ª£c cung c·∫•p, k·ªãch b·∫£n s·∫Ω ch·∫°y ·ªü ch·∫ø ƒë·ªô t∆∞∆°ng t√°c."
    exit 1
}

# --- X·ª≠ l√Ω c√°c tham s·ªë d√≤ng l·ªánh ---
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -d|--domain) SERVER_HOST="$2"; shift ;;
        -o|--openai-key) OPENAI_API_KEY="$2"; shift ;;
        -l|--letta-key) LETTA_API_KEY="$2"; shift ;;
        -p|--pg-password) POSTGRES_PASSWORD="$2"; shift ;;
        -u|--pg-user) POSTGRES_USER="$2"; shift ;;
        -n|--pg-db) POSTGRES_DB="$2"; shift ;;
        -c|--pg-container) POSTGRES_CONTAINER_NAME="$2"; shift ;;
        -h|--help) usage ;;
        *) echo "Unknown parameter passed: $1"; usage ;;
    esac
    shift
done

# --- Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c n·∫øu thi·∫øu th√¥ng tin ---
echo -e "${GREEN}Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi k·ªãch b·∫£n c√†i ƒë·∫∑t Letta Server t·ª± ƒë·ªông!${NC}"
echo "------------------------------------------------------------------"

# H·ªèi th√¥ng tin n·∫øu ch∆∞a ƒë∆∞·ª£c cung c·∫•p qua tham s·ªë
[[ -z "$SERVER_HOST" ]] && read -p "Nh·∫≠p t√™n mi·ªÅn ho·∫∑c IP c·ªßa VPS: " SERVER_HOST
[[ -z "$OPENAI_API_KEY" ]] && read -p "Nh·∫≠p OpenAI API Key (sk-...): " OPENAI_API_KEY
[[ -z "$LETTA_API_KEY" ]] && read -p "T·∫°o v√† nh·∫≠p m·ªôt Letta API Key (chu·ªói ng·∫´u nhi√™n, b·∫£o m·∫≠t): " LETTA_API_KEY
[[ -z "$POSTGRES_PASSWORD" ]] && read -s -p "Nh·∫≠p m·∫≠t kh·∫©u cho PostgreSQL User: " POSTGRES_PASSWORD && echo
[[ -z "$POSTGRES_USER" ]] && read -p "Nh·∫≠p t√™n user c·ªßa PostgreSQL (v√≠ d·ª•: ticmiro2): " POSTGRES_USER
[[ -z "$POSTGRES_DB" ]] && read -p "Nh·∫≠p t√™n database c·ªßa PostgreSQL (v√≠ d·ª•: ticmirodb2): " POSTGRES_DB
[[ -z "$POSTGRES_CONTAINER_NAME" ]] && read -p "Nh·∫≠p t√™n container Docker c·ªßa PostgreSQL (m·∫∑c ƒë·ªãnh: postgres_db): " POSTGRES_CONTAINER_NAME

# G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu v·∫´n tr·ªëng
POSTGRES_CONTAINER_NAME=${POSTGRES_CONTAINER_NAME:-postgres_db}

# --- Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt ---
echo "------------------------------------------------------------------"
echo -e "${YELLOW}Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán ti√™n quy·∫øt...${NC}"

if ! [ -x "$(command -v docker)" ] || ! [ -x "$(command -v docker-compose)" ]; then
  echo -e "${RED}L·ªói: Docker ho·∫∑c Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc.${NC}" >&2
  exit 1
fi

if ! docker ps --filter "name=${POSTGRES_CONTAINER_NAME}" --format '{{.Names}}' | grep -wq "${POSTGRES_CONTAINER_NAME}"; then
    echo -e "${RED}L·ªói: Kh√¥ng t√¨m th·∫•y container PostgreSQL '${POSTGRES_CONTAINER_NAME}' ƒëang ch·∫°y.${NC}" >&2
    exit 1
fi
echo "=> Container PostgreSQL '${POSTGRES_CONTAINER_NAME}' ƒë√£ s·∫µn s√†ng."

echo "=> ƒêang t·ª± ƒë·ªông t√¨m Docker network c·ªßa '${POSTGRES_CONTAINER_NAME}'..."
DOCKER_NETWORK_NAME=$(docker inspect -f '{{range $key, $value := .NetworkSettings.Networks}}{{$key}}{{end}}' "${POSTGRES_CONTAINER_NAME}")

if [ -z "$DOCKER_NETWORK_NAME" ]; then
    echo -e "${RED}L·ªói: Kh√¥ng th·ªÉ t·ª± ƒë·ªông t√¨m th·∫•y network c·ªßa container '${POSTGRES_CONTAINER_NAME}'.${NC}" >&2
    exit 1
fi
echo -e "=> T√¨m th·∫•y network: ${GREEN}${DOCKER_NETWORK_NAME}${NC}"

# --- T·∫°o th∆∞ m·ª•c v√† c√°c t·ªáp c·∫•u h√¨nh ---
echo "------------------------------------------------------------------"
echo -e "${YELLOW}B·∫Øt ƒë·∫ßu t·∫°o th∆∞ m·ª•c v√† c√°c t·ªáp c·∫•u h√¨nh...${NC}"
mkdir -p letta-server
cd letta-server

# T·∫°o t·ªáp .env
echo "=> T·∫°o t·ªáp .env..."
cat <<EOF > .env
# T·ªáp n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
OPENAI_API_KEY=${OPENAI_API_KEY}
LETTA_API_KEY=${LETTA_API_KEY}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
EOF

# T·∫°o t·ªáp nginx.conf
echo "=> T·∫°o t·ªáp nginx.conf..."
cat <<EOF > nginx.conf
events {}
http {
    server {
        listen 80;
        server_name ${SERVER_HOST};
        location / {
            proxy_pass http://letta_api_server:8283;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
EOF

# T·∫°o t·ªáp compose.yaml
echo "=> T·∫°o t·ªáp compose.yaml..."
cat <<EOF > compose.yaml
services:
  letta_server:
    image: letta/letta:latest
    container_name: letta_api_server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - LETTA_PG_URI=postgresql://${POSTGRES_USER}:\${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER_NAME}:5432/${POSTGRES_DB}
      - OPENAI_API_KEY=\${OPENAI_API_KEY}
      - LETTA_API_KEY=\${LETTA_API_KEY}
    networks:
      - ${DOCKER_NETWORK_NAME}
  letta_nginx:
    image: nginx:stable-alpine
    container_name: letta_nginx_proxy
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - letta_server
    networks:
      - ${DOCKER_NETWORK_NAME}
networks:
  ${DOCKER_NETWORK_NAME}:
    external: true
EOF

echo -e "${GREEN}T·∫°o c√°c t·ªáp c·∫•u h√¨nh th√†nh c√¥ng!${NC}"

# --- Kh·ªüi ch·∫°y Docker Compose ---
echo "------------------------------------------------------------------"
echo -e "${YELLOW}Chu·∫©n b·ªã kh·ªüi ƒë·ªông c√°c container...${NC}"

docker-compose -f compose.yaml down --remove-orphans
docker-compose -f compose.yaml up -d --force-recreate --remove-orphans

echo "------------------------------------------------------------------"
echo -e "${GREEN}üöÄ Ho√†n t·∫•t!${NC}"
echo "ƒêang ki·ªÉm tra tr·∫°ng th√°i c√°c container:"
docker ps --filter "name=letta"
echo ""
echo "B·∫°n c√≥ th·ªÉ truy c·∫≠p Letta t·∫°i: http://${SERVER_HOST}"
echo "ƒê·ªÉ xem log, s·ª≠ d·ª•ng l·ªánh: docker-compose -f compose.yaml logs -f"